#!/bin/sh 

# Stuart Powers
# stuart.powers@gmail.com
# http://www.sente.cc/

# execute commands on remote servers:
# ./runremote --cmd 'uptime; echo ""; du -sh $HOME; echo ""; who' --server colobus --server common --logdir logs


CMD=""
SERVER=""
LOGFILE=""
LOGDIR=""
HEADER=0
BACKGROUND=0
HTMLLOG=0
SERVERLIST=()
SSHOPTIONS="-oConnectTimeout=5 -oBatchMode=yes"


usage()
{
    cat <<EOF
Usage:
    $PROGRAM 

            [ --command | --cmd | -cmd | -c ... ]
                   the command which will be executed on the remote server

            [ --server | -server | -s "..." ]
                    the server(s) you want to run the command on

            [ --list-of-servers | --list | -list "..." ]
                    a file containing each server, OR
                    "-" to read servers from the command line

            [ --html ]
                log to an html file

            [ --header ]
                print the server name before each commmand

            [ --log | -log | -l "..." ]
                capture all output to a single log file

            [ --logdir | -logdir "..." ]
                create a different log for each of the servers

            [ --d | --debug | --test  ]
                don't actually run the commands

EOF
}

usage_and_exit()
{
    usage
    exit $1
}

PROGRAM=`basename $0`

while test $# -gt 0; do
    
	case $1 in

	--command | --cmd | --c | -c | -cmd )
		shift
		CMD="$1"
		;;

	--bg | --thread )
		BACKGROUND=1
		;;

	--server | -s )
		shift
		SERVER+=("$1")
		;;


	--help | --hel | --he | --h | '--?' | -help | -hel | -he | -h | '-?' )
		usage_and_exit 0
		;;

	--log | -l | -log )
		shift
		LOGFILE=$1
		;;

	--listofservers | -list | --list )
		shift
		SERVERLIST=$1
        if [[ "${SERVERLIST}" == "-" ]] ; then SERVERLIST=/dev/stdin; fi
		;;

	--logdir | -logdir )
		shift
		LOGDIR=$1
		;;

	--debug | -d | --test | --echo )
        function ssh () { echo ssh "$@"; }
		;;
        
	--header )
        HEADER=1
		;;

	--html )
		HTMLLOG=$1
		;;

	-*)
		error "Unrecognized option: $1"
		;;

	*)
		break
		;;

	esac
	shift
done



if [[ -f "${SERVERLIST}" || "${SERVERLIST}" = "/dev/stdin" ]]; then
    while read line; do
        SERVER+=("$line")
    done <${SERVERLIST}
fi

MASTERLOG=logs/masterlog.txt

function logger() {
    echo "[[$@]]" > $MASTERLOG
    while read line;
        do echo $line;
    done < /dev/stdin > $MASTERLOG
}

function stderr() {
if [ $HEADER -ne 1 ]; then return; fi
    COLOR=$1
    shift;
    echo -ne $COLOR >&2
    echo $@ >&2
    echo -ne $COLOR_NC >&2
}

function stdout() {
#if [ $HEADER -ne 1 ]; then return; fi
    COLOR=$1
    shift;
    echo -ne "$COLOR" #>&2
    echo "$@" >&2
    echo -ne "$COLOR_NC" #>&2
}

COLOR_BLACK='\033[0;30m'
COLOR_BLUE='\033[0;34m'
COLOR_BROWN='\033[0;33m'
COLOR_CYAN='\033[0;36m'
COLOR_GRAY='\033[1;30m'
COLOR_GREEN='\033[0;32m'
COLOR_LIGHT_BLUE='\033[1;34m'
COLOR_LIGHT_CYAN='\033[1;36m'
COLOR_LIGHT_GRAY='\033[0;37m'
COLOR_LIGHT_GREEN='\033[1;32m'
COLOR_LIGHT_PURPLE='\033[1;35m'
COLOR_LIGHT_RED='\033[1;31m'
COLOR_NC='\033[0m'
COLOR_PURPLE='\033[0;35m'
COLOR_RED='\033[0;31m'
COLOR_WHITE='\033[1;37m'
COLOR_YELLOW='\033[1;33m'

#TODO FIX ME!!!
rm tmplog.log 2>/dev/null


function LOGFUNC() {
    if [ -d "${LOGDIR}" ]; then
        cat "${UNIQ}" > "${LOGDIR}/${serv}.log"
    fi
}

for serv in ${SERVER[@]}; do

    UNIQ=$(date +%s).${serv}.tmp

    [[ -z "${LOGDIR}" ]] || [[ -d "${LOGDIR}" ]] || mkdir "${LOGDIR}"
    if [[ -d "${LOGDIR}" ]]; then LOGFILE="${LOGDIR}/$serv.log"; fi

    (( stderr $COLOR_LIGHT_GREEN "$serv"; ssh -n $SSHOPTIONS $serv "$CMD" 2>/dev/null ) 1>${UNIQ} 2>&1 ; cat ${UNIQ}; LOGFUNC; rm ${UNIQ}) &

    [[ $BACKGROUND = 0 ]] && wait #let's not be hasty!

done

wait




